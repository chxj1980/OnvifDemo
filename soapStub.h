/* soapStub.h
   Generated by gSOAP 2.8.71 for MobileCode.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#define SOAP_NAMESPACE_OF_ns1	"http://WebXml.com.cn/"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20871
# error "GSOAP VERSION 20871 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class ns1__ArrayOfString;	/* MobileCode.h:146 */
class _ns1__getMobileCodeInfo;	/* MobileCode.h:149 */
class _ns1__getMobileCodeInfoResponse;	/* MobileCode.h:152 */
class _ns1__getDatabaseInfo;	/* MobileCode.h:155 */
class _ns1__getDatabaseInfoResponse;	/* MobileCode.h:158 */
struct __ns1__getMobileCodeInfo;	/* MobileCode.h:447 */
struct __ns1__getDatabaseInfo;	/* MobileCode.h:519 */
struct __ns1__getMobileCodeInfo_;	/* MobileCode.h:593 */
struct __ns1__getDatabaseInfo_;	/* MobileCode.h:665 */

/* MobileCode.h:146 */
#ifndef SOAP_TYPE_ns1__ArrayOfString
#define SOAP_TYPE_ns1__ArrayOfString (7)
/* complex XML schema type 'ns1:ArrayOfString': */
class SOAP_CMAC ns1__ArrayOfString {
      public:
        /// Sequence of elements 'ns1:string' of XML schema type 'xsd:string' stored in dynamic array string of length __sizestring
        int __sizestring;
        char **string;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__ArrayOfString
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__ArrayOfString; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__ArrayOfString, default initialized and not managed by a soap context
        virtual ns1__ArrayOfString *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__ArrayOfString); }
      public:
        /// Constructor with initializations
        ns1__ArrayOfString() : __sizestring(), string(), soap() { }
        virtual ~ns1__ArrayOfString() { }
        /// Friend allocator used by soap_new_ns1__ArrayOfString(struct soap*, int)
        friend SOAP_FMAC1 ns1__ArrayOfString * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfString(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* MobileCode.h:149 */
#ifndef SOAP_TYPE__ns1__getMobileCodeInfo
#define SOAP_TYPE__ns1__getMobileCodeInfo (8)
/* complex XML schema type 'ns1:getMobileCodeInfo': */
class SOAP_CMAC _ns1__getMobileCodeInfo {
      public:
        /// Optional element 'ns1:mobileCode' of XML schema type 'xsd:string'
        char *mobileCode;
        /// Optional element 'ns1:userID' of XML schema type 'xsd:string'
        char *userID;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__getMobileCodeInfo
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__getMobileCodeInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__getMobileCodeInfo, default initialized and not managed by a soap context
        virtual _ns1__getMobileCodeInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__getMobileCodeInfo); }
      public:
        /// Constructor with initializations
        _ns1__getMobileCodeInfo() : mobileCode(), userID(), soap() { }
        virtual ~_ns1__getMobileCodeInfo() { }
        /// Friend allocator used by soap_new__ns1__getMobileCodeInfo(struct soap*, int)
        friend SOAP_FMAC1 _ns1__getMobileCodeInfo * SOAP_FMAC2 soap_instantiate__ns1__getMobileCodeInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* MobileCode.h:152 */
#ifndef SOAP_TYPE__ns1__getMobileCodeInfoResponse
#define SOAP_TYPE__ns1__getMobileCodeInfoResponse (9)
/* complex XML schema type 'ns1:getMobileCodeInfoResponse': */
class SOAP_CMAC _ns1__getMobileCodeInfoResponse {
      public:
        /// Optional element 'ns1:getMobileCodeInfoResult' of XML schema type 'xsd:string'
        char *getMobileCodeInfoResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__getMobileCodeInfoResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__getMobileCodeInfoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__getMobileCodeInfoResponse, default initialized and not managed by a soap context
        virtual _ns1__getMobileCodeInfoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__getMobileCodeInfoResponse); }
      public:
        /// Constructor with initializations
        _ns1__getMobileCodeInfoResponse() : getMobileCodeInfoResult(), soap() { }
        virtual ~_ns1__getMobileCodeInfoResponse() { }
        /// Friend allocator used by soap_new__ns1__getMobileCodeInfoResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__getMobileCodeInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__getMobileCodeInfoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* MobileCode.h:155 */
#ifndef SOAP_TYPE__ns1__getDatabaseInfo
#define SOAP_TYPE__ns1__getDatabaseInfo (10)
/* complex XML schema type 'ns1:getDatabaseInfo': */
class SOAP_CMAC _ns1__getDatabaseInfo {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__getDatabaseInfo
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__getDatabaseInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__getDatabaseInfo, default initialized and not managed by a soap context
        virtual _ns1__getDatabaseInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__getDatabaseInfo); }
      public:
        /// Constructor with initializations
        _ns1__getDatabaseInfo() : soap() { }
        virtual ~_ns1__getDatabaseInfo() { }
        /// Friend allocator used by soap_new__ns1__getDatabaseInfo(struct soap*, int)
        friend SOAP_FMAC1 _ns1__getDatabaseInfo * SOAP_FMAC2 soap_instantiate__ns1__getDatabaseInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* MobileCode.h:158 */
#ifndef SOAP_TYPE__ns1__getDatabaseInfoResponse
#define SOAP_TYPE__ns1__getDatabaseInfoResponse (11)
/* complex XML schema type 'ns1:getDatabaseInfoResponse': */
class SOAP_CMAC _ns1__getDatabaseInfoResponse {
      public:
        /// Optional element 'ns1:getDatabaseInfoResult' of XML schema type 'ns1:ArrayOfString'
        ns1__ArrayOfString *getDatabaseInfoResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__getDatabaseInfoResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__getDatabaseInfoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__getDatabaseInfoResponse, default initialized and not managed by a soap context
        virtual _ns1__getDatabaseInfoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__getDatabaseInfoResponse); }
      public:
        /// Constructor with initializations
        _ns1__getDatabaseInfoResponse() : getDatabaseInfoResult(), soap() { }
        virtual ~_ns1__getDatabaseInfoResponse() { }
        /// Friend allocator used by soap_new__ns1__getDatabaseInfoResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__getDatabaseInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__getDatabaseInfoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* MobileCode.h:447 */
#ifndef SOAP_TYPE___ns1__getMobileCodeInfo
#define SOAP_TYPE___ns1__getMobileCodeInfo (18)
/* Wrapper: */
struct SOAP_CMAC __ns1__getMobileCodeInfo {
      public:
        /** Optional element 'ns1:getMobileCodeInfo' of XML schema type 'ns1:getMobileCodeInfo' */
        _ns1__getMobileCodeInfo *ns1__getMobileCodeInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getMobileCodeInfo */
        long soap_type() const { return SOAP_TYPE___ns1__getMobileCodeInfo; }
        /** Constructor with member initializations */
        __ns1__getMobileCodeInfo() : ns1__getMobileCodeInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__getMobileCodeInfo * SOAP_FMAC2 soap_instantiate___ns1__getMobileCodeInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* MobileCode.h:519 */
#ifndef SOAP_TYPE___ns1__getDatabaseInfo
#define SOAP_TYPE___ns1__getDatabaseInfo (22)
/* Wrapper: */
struct SOAP_CMAC __ns1__getDatabaseInfo {
      public:
        /** Optional element 'ns1:getDatabaseInfo' of XML schema type 'ns1:getDatabaseInfo' */
        _ns1__getDatabaseInfo *ns1__getDatabaseInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getDatabaseInfo */
        long soap_type() const { return SOAP_TYPE___ns1__getDatabaseInfo; }
        /** Constructor with member initializations */
        __ns1__getDatabaseInfo() : ns1__getDatabaseInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__getDatabaseInfo * SOAP_FMAC2 soap_instantiate___ns1__getDatabaseInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* MobileCode.h:593 */
#ifndef SOAP_TYPE___ns1__getMobileCodeInfo_
#define SOAP_TYPE___ns1__getMobileCodeInfo_ (24)
/* Wrapper: */
struct SOAP_CMAC __ns1__getMobileCodeInfo_ {
      public:
        /** Optional element 'ns1:getMobileCodeInfo' of XML schema type 'ns1:getMobileCodeInfo' */
        _ns1__getMobileCodeInfo *ns1__getMobileCodeInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getMobileCodeInfo_ */
        long soap_type() const { return SOAP_TYPE___ns1__getMobileCodeInfo_; }
        /** Constructor with member initializations */
        __ns1__getMobileCodeInfo_() : ns1__getMobileCodeInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__getMobileCodeInfo_ * SOAP_FMAC2 soap_instantiate___ns1__getMobileCodeInfo_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* MobileCode.h:665 */
#ifndef SOAP_TYPE___ns1__getDatabaseInfo_
#define SOAP_TYPE___ns1__getDatabaseInfo_ (26)
/* Wrapper: */
struct SOAP_CMAC __ns1__getDatabaseInfo_ {
      public:
        /** Optional element 'ns1:getDatabaseInfo' of XML schema type 'ns1:getDatabaseInfo' */
        _ns1__getDatabaseInfo *ns1__getDatabaseInfo;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getDatabaseInfo_ */
        long soap_type() const { return SOAP_TYPE___ns1__getDatabaseInfo_; }
        /** Constructor with member initializations */
        __ns1__getDatabaseInfo_() : ns1__getDatabaseInfo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__getDatabaseInfo_ * SOAP_FMAC2 soap_instantiate___ns1__getDatabaseInfo_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* MobileCode.h:790 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (27)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* MobileCode.h:790 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (28)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* MobileCode.h:790 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (30)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* MobileCode.h:790 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (33)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* MobileCode.h:790 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (34)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* _ns1__getDatabaseInfoResponse has binding name '_ns1__getDatabaseInfoResponse' for type '' */
#ifndef SOAP_TYPE__ns1__getDatabaseInfoResponse
#define SOAP_TYPE__ns1__getDatabaseInfoResponse (11)
#endif

/* _ns1__getDatabaseInfo has binding name '_ns1__getDatabaseInfo' for type '' */
#ifndef SOAP_TYPE__ns1__getDatabaseInfo
#define SOAP_TYPE__ns1__getDatabaseInfo (10)
#endif

/* _ns1__getMobileCodeInfoResponse has binding name '_ns1__getMobileCodeInfoResponse' for type '' */
#ifndef SOAP_TYPE__ns1__getMobileCodeInfoResponse
#define SOAP_TYPE__ns1__getMobileCodeInfoResponse (9)
#endif

/* _ns1__getMobileCodeInfo has binding name '_ns1__getMobileCodeInfo' for type '' */
#ifndef SOAP_TYPE__ns1__getMobileCodeInfo
#define SOAP_TYPE__ns1__getMobileCodeInfo (8)
#endif

/* ns1__ArrayOfString has binding name 'ns1__ArrayOfString' for type 'ns1:ArrayOfString' */
#ifndef SOAP_TYPE_ns1__ArrayOfString
#define SOAP_TYPE_ns1__ArrayOfString (7)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (34)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (33)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (30)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (28)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (27)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (36)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (35)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (29)
#endif

/* _ns1__getDatabaseInfo * has binding name 'PointerTo_ns1__getDatabaseInfo' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__getDatabaseInfo
#define SOAP_TYPE_PointerTo_ns1__getDatabaseInfo (19)
#endif

/* _ns1__getMobileCodeInfo * has binding name 'PointerTo_ns1__getMobileCodeInfo' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__getMobileCodeInfo
#define SOAP_TYPE_PointerTo_ns1__getMobileCodeInfo (15)
#endif

/* ns1__ArrayOfString * has binding name 'PointerTons1__ArrayOfString' for type 'ns1:ArrayOfString' */
#ifndef SOAP_TYPE_PointerTons1__ArrayOfString
#define SOAP_TYPE_PointerTons1__ArrayOfString (14)
#endif

/* char ** has binding name 'PointerTostring' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostring
#define SOAP_TYPE_PointerTostring (12)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stub Functions                                            *
 *                                                                            *
\******************************************************************************/

    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getMobileCodeInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getMobileCodeInfo *ns1__getMobileCodeInfo, _ns1__getMobileCodeInfoResponse &ns1__getMobileCodeInfoResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getDatabaseInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getDatabaseInfo *ns1__getDatabaseInfo, _ns1__getDatabaseInfoResponse &ns1__getDatabaseInfoResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getMobileCodeInfo_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getMobileCodeInfo *ns1__getMobileCodeInfo, _ns1__getMobileCodeInfoResponse &ns1__getMobileCodeInfoResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getDatabaseInfo_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getDatabaseInfo *ns1__getDatabaseInfo, _ns1__getDatabaseInfoResponse &ns1__getDatabaseInfoResponse);

#endif

/* End of soapStub.h */
